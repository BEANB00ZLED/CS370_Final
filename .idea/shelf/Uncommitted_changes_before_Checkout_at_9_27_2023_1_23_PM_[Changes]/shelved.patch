Index: Meeples.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\nWHITE = (255, 255, 255)\r\n#RED = (255, 0, 0)\r\n\r\n# Define the game piece class\r\nclass Meeples:\r\n    #initializes game peice attributes including position x,y\r\n    def __init__(self, x, y, width, height, color):\r\n        self.image = None\r\n        self.rect = pygame.Rect(x, y, width, height)\r\n        #self.rect.topleft = (x, y)\r\n        self.color_image = {\r\n            1: 'meeple_character_red.png',\r\n            2: 'meeple_character_green.png',\r\n            3: 'meeple_character_orange.png',\r\n            4: 'meeple_character_blue.png'\r\n        }\r\n        self.current_color = None\r\n        #initializes is dragging false so the peice cant be initally dragged\r\n        #self.is_dragging = False\r\n\r\n    #this renders the game peice on the screen\r\n    #def draw(self, screen):\r\n    def load_image(self, meeple_character):\r\n        self.image = pygame.image.load(meeple_character)\r\n        self.rect = self.image.get_rect()\r\n        \r\n\r\n    #this allows for the mouse to click and move game peice \r\n    def process(self, screen, event_list):\r\n        for event in event_list:\r\n            if event.type == pygame.KEYDOWN: \r\n                #if event.button == 1: #and self.rect.collidepoint(event.pos)\r\n                    #screen.blit(self.image, self.rect.topleft)\r\n                if event.key in [pygame.K_1, pygame.K_2, pygame.K_3, pygame.K_4]:\r\n                    color_key = int(event.unicode)\r\n                    if color_key in self.color_image:\r\n                        self.load_image(self.color_image[color_key])\r\n                        self.current_color = color_key\r\n                    self.rect.topleft = pygame.mouse.get_pos()\r\n        \r\n        if self.current_color is not None:\r\n            mouse_x, mouse_y = pygame.mouse.get_pos()\r\n            self.rect.topleft = (mouse_x, mouse_y)\r\n            #elif event.type == pygame.MOUSEBUTTONUP and event.button == 1:\r\n                #self.is_dragging = False\r\n        if self.image:\r\n            screen.blit(self.image, self.rect.topleft)\r\n            #if self.is_dragging:\r\n                #if event.type == pygame.MOUSEMOTION:\r\n                    #self.rect.centerx, self.rect.centery = event.pos
===================================================================
diff --git a/Meeples.py b/Meeples.py
--- a/Meeples.py	
+++ b/Meeples.py	
@@ -1,15 +1,12 @@
 import pygame
 
 WHITE = (255, 255, 255)
-#RED = (255, 0, 0)
 
-# Define the game piece class
+
 class Meeples:
-    #initializes game peice attributes including position x,y
     def __init__(self, x, y, width, height, color):
         self.image = None
         self.rect = pygame.Rect(x, y, width, height)
-        #self.rect.topleft = (x, y)
         self.color_image = {
             1: 'meeple_character_red.png',
             2: 'meeple_character_green.png',
@@ -17,36 +14,23 @@
             4: 'meeple_character_blue.png'
         }
         self.current_color = None
-        #initializes is dragging false so the peice cant be initally dragged
-        #self.is_dragging = False
 
-    #this renders the game peice on the screen
-    #def draw(self, screen):
     def load_image(self, meeple_character):
         self.image = pygame.image.load(meeple_character)
         self.rect = self.image.get_rect()
-        
 
-    #this allows for the mouse to click and move game peice 
     def process(self, screen, event_list):
         for event in event_list:
-            if event.type == pygame.KEYDOWN: 
-                #if event.button == 1: #and self.rect.collidepoint(event.pos)
-                    #screen.blit(self.image, self.rect.topleft)
+            if event.type == pygame.KEYDOWN:
                 if event.key in [pygame.K_1, pygame.K_2, pygame.K_3, pygame.K_4]:
                     color_key = int(event.unicode)
                     if color_key in self.color_image:
                         self.load_image(self.color_image[color_key])
                         self.current_color = color_key
-                    self.rect.topleft = pygame.mouse.get_pos()
-        
-        if self.current_color is not None:
-            mouse_x, mouse_y = pygame.mouse.get_pos()
-            self.rect.topleft = (mouse_x, mouse_y)
-            #elif event.type == pygame.MOUSEBUTTONUP and event.button == 1:
-                #self.is_dragging = False
-        if self.image:
-            screen.blit(self.image, self.rect.topleft)
-            #if self.is_dragging:
-                #if event.type == pygame.MOUSEMOTION:
-                    #self.rect.centerx, self.rect.centery = event.pos
\ No newline at end of file
+                        # Spawn a meeple at the current mouse location
+                        mouse_x, mouse_y = pygame.mouse.get_pos()
+                        self.rect.topleft = (mouse_x, mouse_y)
+
+        if self.current_color is not None:
+            if self.image:
+                screen.blit(self.image, self.rect.topleft)
\ No newline at end of file
